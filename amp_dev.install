<?php

/**
 * @file
 */

use Drupal\user\Entity\User;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\node\Entity\Node;

/**
 * @file
 * Initiate dev site.
 */

/**
 * Implements hook_install().
 */
function amp_dev_install() {
  \Drupal::service('module_installer')->uninstall(['captcha', 'image_captcha', 'recaptcha']);
  // Disable constant contact cron run.
  \Drupal::state()->set('access_affinitygroup.alloc_cron_disable', TRUE);

  // amp_dev_install_tagged_resource();
  // amp_dev_install_create_dummy_ci_links();
  amp_dev_install_update_user_100();
  amp_dev_install_update_dummy_users();
  amp_dev_install_update_user_101();

  // Create test content for Cypress tests.
  amp_dev_install_create_test_announcements();
  amp_dev_install_create_test_events();
}

/**
 *
 */
function amp_dev_install_tagged_resource() {
  // Creating a resource that has a tag on it
  // Example IDs.
  $webform_id = 'resource';
  $webform = Webform::load($webform_id);
  // kint($webform);
  // Create webform submission.
  $values = [
    'webform_id' => $webform->id(),
    'data' => [
      'approved' => 'Approved',
      'title' => 'Cybersecurity Resource Center',
      'category' => 'learning',
      // Ai tag.
      'tags' => ['271'],
      // Beginner.
      'skill_level' => ['304'],
      'description' => 'The Cybersecurity Resource Center is one of the best around.
      They are at your service 24/7 and can help very quickly. They are great at what they do!',
      // 'link_to_resource' =>[
      // '#type' => 'link',
      // '#title' => 'https://www.opm.gov/cybersecurity/',
      // '#url' => Url::fromUri('https://www.opm.gov/cybersecurity/'),
      // 'terms' => '0',
      // ]
      // 'link_to_resource' =>[
      // Link::fromTextAndUrl('https://www.opm.gov/cybersecurity/',Url::fromUri('https://www.opm.gov/cybersecurity/')),
      // ],
    ],
  ];

  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
  $webform_submission = WebformSubmission::create($values);
  $webform_submission->save();
}

/**
 *
 */
function amp_dev_install_create_dummy_ci_links() {

  $dummy_ci_links = [
    ['title' => 'ci-link-for-user-200', 'uid' => 199],
    ['title' => 'ci-link-for-user-201', 'uid' => 201],
  ];

  foreach ($dummy_ci_links as $dummy_ci_link) {
    $webform_id = 'resource';

    $webform = Webform::load($webform_id);
    if ($webform->hasSubmissions()) {
      $query = \Drupal::entityQuery('webform_submission')
        ->accessCheck(TRUE)
        ->condition('webform_id', $webform_id);
      $result = $query->execute();
      foreach ($result as $item) {
        $submission = WebformSubmission::load($item);
        $submission_data = $submission->getData();

        if ($submission_data['title'] === $dummy_ci_link['title']) {
          $submission->delete();
        }
      }
    }

    // Create webform submission.
    $values = [
      'webform_id' => $webform->id(),
      'uid' => $dummy_ci_link['uid'],
      'uri' => '/form/resource',
      'data' => [
        'title' => $dummy_ci_link['title'],
        'category' => 'learning',
        'approved' => 1,
      ],
    ];

    /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
    $webform_submission = WebformSubmission::create($values);
    $webform_submission->save();
  }
}

/**
 * Update users 199 & 201 to be test users with testable roles, interests, etc.
 * A behat test then checks that these users have the correct values.
 */
function amp_dev_install_update_dummy_users() {
  $users = [
    [
      'id' => 199,
      'first_name' => 'Walnut',
      'last_name' => 'Pie',
      'field_institution' => 'institution-for-walnut-pie',
      // '4300' is the ID for 'MGHPCC'
      'field_access_organization' => ['4300'],
      'name' => 'test_walnut_pie',
      'email' => 'walnut@pie.org',
      'preferred_pronouns' => 'they/them',
      'bio' => 'I am a pie',
      'roles' => ['affinity_group_leader', 'student'],
      'field_academic_status' => 'third',
      'affinity_group' => ['DELTA'],
      'interest' => ['science gateway', 'access-acount'],
      'skill' => ['bioinformatics', 'astrophysics'],
    ],
    [
      'id' => 201,
      'first_name' => 'Pecan',
      'last_name' => 'Pie',
      'field_institution' => 'institution-for-pecan-pie',
      // '4300' is the ID for 'MGHPCC'
      'field_access_organization' => ['4300'],
      'name' => 'test_pecan_pie',
      'preferred_pronouns' => 'they/them',
      'bio' => 'I am a pie',
      'email' => 'pecan@pie.org',
      'roles' => ['campuschampionsadmin', 'ccmnet_pm'],
      'affinity_group' => ['DELTA', 'Rockfish'],
      'interest' => ['data-management-software', 'distributed-computing'],
    ],
    [
      'id' => 204,
      'first_name' => 'Apple',
      'last_name' => 'Pie',
      'field_institution' => 'institution-for-apple-pie',
      // '4300' is the ID for 'MGHPCC'
      'field_access_organization' => ['4300'],
      'name' => 'test_apple_pie',
      'preferred_pronouns' => 'they/them',
      'bio' => 'I am a pie',
      'email' => 'apple@pie.org',
      'roles' => ['administrator'],
      'affinity_group' => ['Rockfish'],
      'interest' => [],
    ],
    [
      'id' => 1998,
      'first_name' => 'Test',
      'last_name' => 'Smith',
      'field_institution' => 'Smith U',
      // '4300' is the ID for 'MGHPCC'
      'field_access_organization' => ['4300'],
      'name' => 'TestSmith',
      'preferred_pronouns' => 'they/them',
      'bio' => 'Average person',
      'email' => 'test@sweetandfizzy.com',
      'roles' => ['administrator'],
      'affinity_group' => ['Rockfish'],
      'interest' => [],
    ],
    [
      'id' => 1373,
      'first_name' => 'Andrew',
      'last_name' => 'Pasquale',
      // "Massachusetts Green High Performance Computing Center"
      'field_access_organization' => ['4191'],
    ],
    [
      'id' => 4295,
      'first_name' => 'Jacob',
      'last_name' => 'Fosso Tande',
    ],
  ];

  foreach ($users as $user_data) {

    $user = User::load($user_data['id']);

    $user->set('field_user_first_name', $user_data['first_name']);
    $user->set('field_user_last_name', $user_data['last_name']);
    $user->set('field_institution', $user_data['field_institution']);
    $user->set('field_access_organization', $user_data['field_access_organization']);
    $user->set('field_user_preferred_pronouns', $user_data['preferred_pronouns']);
    $user->set('field_user_bio', $user_data['bio']);
    // $user->set('name', $user_data['name']);
    $user->set('mail', $user_data['email']);
    $user->set('pass', $user_data['first_name']);
    $user->set('status', 1);
    $user->set('roles', $user_data['roles']);
    if (array_key_exists('field_academic_status', $user_data)) {
      $user->set('field_academic_status', $user_data['field_academic_status']);
    }
    $user->save();

    // Set flags on the following categories:
    foreach (['interest', 'skill', 'affinity_group'] as $flag_name) {
      amp_dev_install_user_set_flag($user, $user_data, $flag_name);
    }

    // $msg = __FUNCTION__ . "() - created user with email = "  . $user_data['email']
    //   . ' -- ' . basename(__FILE__) . ':' . __LINE__;
    // \Drupal::logger('amp_dev.install')->notice($msg);
    // \Drupal::messenger()->addStatus($msg);
  }
}

/**
 * Helper function to update flags when modifying a test user.
 */
function amp_dev_install_user_set_flag($user, $user_data, $flag_name) {
  $flag_service = \Drupal::service('flag');
  if (array_key_exists($flag_name, $user_data)) {
    foreach ($user_data[$flag_name] as $tax_term) {
      $taxonomy_entity = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(['name' => $tax_term]);
      $taxonomy_entity = reset($taxonomy_entity);

      if ($taxonomy_entity === FALSE) {
        $msg = __FUNCTION__ . "() -- taxonomy term '$tax_term' not found"
          . ' -- ' . basename(__FILE__) . ':' . __LINE__;
        \Drupal::logger('amp_dev.install')->error($msg);
        \Drupal::messenger()->addError($msg);
      }
      else {
        $tax_flag_service = $flag_service->getFlagById($flag_name);
        $already_flagged = $flag_service->getFlagging($tax_flag_service, $taxonomy_entity, $user);
        if (!$already_flagged) {
          $flag_service->flag($tax_flag_service, $taxonomy_entity, $user);
        }
      }
    }
  }
}

/**
 * Set all user__field_user_first_name to default.
 */
function amp_dev_install_update_user_100() {
  amp_dev_dbupdate('user__field_user_first_name', 'field_user_first_name_value', 'Lux');
  amp_dev_dbupdate('registrant__field_first_name', 'field_first_name_value', 'Lux');
  amp_dev_dbupdate('registrant_revision__field_first_name', 'field_first_name_value', 'Lux');
  amp_dev_dbupdate('user__field_user_last_name', 'field_user_last_name_value', 'Rivers');
  amp_dev_dbupdate('registrant__field_last_name', 'field_last_name_value', 'Rivers');
  amp_dev_dbupdate('registrant_revision__field_last_name', 'field_last_name_value', 'Rivers');
}

/**
 * Db mass update.
 */
function amp_dev_dbupdate($table, $field, $value) {
  $update = \Drupal::database()->update($table)
    ->fields([
      $field => $value,
    ])
    ->execute();
}

/**
 * Set Julie's name.
 */
function amp_dev_install_update_user_101() {
  $user_100 = \Drupal::entityTypeManager()->getStorage('user')->load(100);
  $user_100->set('field_user_first_name', 'Julie');
  $user_100->set('field_user_last_name', 'Ma');
  $user_100->set('field_institution', 'MGHPCC');
  $user_100->save();
}

/**
 * Create test announcements with different choose_where_to_share_this values.
 *
 * These announcements are used by Cypress tests to verify visibility behavior
 * based on the new field_choose_where_to_share_this field.
 */
function amp_dev_install_create_test_announcements() {
  // Get the 'ai' tag term ID.
  $ai_tag = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['name' => 'ai', 'vid' => 'tags']);
  $ai_tag_id = $ai_tag ? reset($ai_tag)->id() : NULL;

  // Get ACCESS Support affinity group node ID (typically 327).
  $access_support_ag = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties(['type' => 'affinity_group', 'title' => 'ACCESS Support']);
  $access_support_ag_id = $access_support_ag ? reset($access_support_ag)->id() : NULL;

  $announcements = [
    [
      'title' => 'Test Announcement - Main Page Only',
      'field_choose_where_to_share_this' => ['on_the_announcements_page'],
      'field_affiliation' => 'Community',
      'field_tags' => $ai_tag_id ? [$ai_tag_id] : [],
      'body' => 'This announcement should only appear on the main /announcements page.',
    ],
    [
      'title' => 'Test Announcement - Affinity Group Only',
      'field_choose_where_to_share_this' => ['on_your_affinity_group_page'],
      'field_affiliation' => 'Community',
      'field_affinity_group_node' => $access_support_ag_id ? [$access_support_ag_id] : [],
      'field_tags' => $ai_tag_id ? [$ai_tag_id] : [],
      'body' => 'This announcement should only appear on the ACCESS Support affinity group page.',
    ],
    [
      'title' => 'Test Announcement - Both Locations',
      'field_choose_where_to_share_this' => [
        'on_the_announcements_page',
        'on_your_affinity_group_page',
      ],
      'field_affiliation' => 'Community',
      'field_affinity_group_node' => $access_support_ag_id ? [$access_support_ag_id] : [],
      'field_tags' => $ai_tag_id ? [$ai_tag_id] : [],
      'body' => 'This announcement should appear on both the main page and the ACCESS Support AG page.',
    ],
    [
      'title' => 'Test Announcement - No Visibility',
      'field_choose_where_to_share_this' => [],
      'field_affiliation' => 'Community',
      'field_tags' => $ai_tag_id ? [$ai_tag_id] : [],
      'body' => 'This announcement should not appear on any listing pages.',
    ],
    [
      'title' => 'Test Announcement - Email Only',
      'field_choose_where_to_share_this' => ['email_to_your_affinity_group'],
      'field_affiliation' => 'Community',
      'field_affinity_group_node' => $access_support_ag_id ? [$access_support_ag_id] : [],
      'field_tags' => $ai_tag_id ? [$ai_tag_id] : [],
      'body' => 'This announcement should only be emailed, not shown on any pages.',
    ],
    [
      'title' => 'Test Announcement - Digest Only',
      'field_choose_where_to_share_this' => ['in_the_access_support_bi_weekly_digest'],
      'field_affiliation' => 'Community',
      'field_tags' => $ai_tag_id ? [$ai_tag_id] : [],
      'body' => 'This announcement should only appear in the bi-weekly digest.',
    ],
  ];

  foreach ($announcements as $announcement_data) {
    // Check if announcement already exists, delete if found.
    $existing = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties([
        'type' => 'access_news',
        'title' => $announcement_data['title'],
      ]);

    if ($existing) {
      foreach ($existing as $node) {
        $node->delete();
      }
    }

    // Create new announcement.
    $node_data = [
      'type' => 'access_news',
      'title' => $announcement_data['title'],
      'field_choose_where_to_share_this' => $announcement_data['field_choose_where_to_share_this'],
      'field_affiliation' => $announcement_data['field_affiliation'],
      'field_published_date' => date('Y-m-d'),
      'body' => [
        'value' => $announcement_data['body'],
        'format' => 'basic_html',
      ],
      'field_domain_access' => ['amp_cyberinfrastructure_org'],
      'moderation_state' => 'published',
      'uid' => 1,
      'status' => 1,
    ];

    // Add optional fields if they exist.
    if (!empty($announcement_data['field_tags'])) {
      $node_data['field_tags'] = $announcement_data['field_tags'];
    }
    if (!empty($announcement_data['field_affinity_group_node'])) {
      $node_data['field_affinity_group_node'] = $announcement_data['field_affinity_group_node'];
    }

    $node = Node::create($node_data);
    $node->save();

    $msg = 'Created test announcement: ' . $announcement_data['title'];
    \Drupal::logger('amp_dev.install')->notice($msg);
  }
}

/**
 * Create test events with different choose_where_to_share_this values.
 *
 * These events are used by Cypress tests to verify visibility behavior
 * based on the new field_choose_where_to_share_this field.
 */
function amp_dev_install_create_test_events() {
  // Get the 'ai' tag term ID.
  $ai_tag = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['name' => 'ai', 'vid' => 'tags']);
  $ai_tag_id = $ai_tag ? reset($ai_tag)->id() : NULL;

  // Get ACCESS Support affinity group node ID.
  $access_support_ag = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties(['type' => 'affinity_group', 'title' => 'ACCESS Support']);
  $access_support_ag_id = $access_support_ag ? reset($access_support_ag)->id() : NULL;

  $events = [
    [
      'title' => 'Test Event - Main Page Only',
      'field_choose_where_to_share_this' => ['on_the_announcements_page'],
      'location' => 'Zoom',
      'event_type' => 'Training',
      'affiliation' => 'Community',
      'summary' => 'This event should only appear on the main /events page.',
      'description' => 'This is a test event for Cypress testing. It validates that events only appear on the main events page when configured.',
      'start_date' => date('Y-m-d\TH:i:s', strtotime('tomorrow +1 hour')),
      'end_date' => date('Y-m-d\TH:i:s', strtotime('tomorrow +3 hours')),
    ],
    [
      'title' => 'Test Event - Affinity Group Only',
      'field_choose_where_to_share_this' => ['on_your_affinity_group_page'],
      'location' => 'Zoom',
      'event_type' => 'Office Hours',
      'affiliation' => 'Community',
      'affinity_group' => $access_support_ag_id,
      'summary' => 'This event should only appear on the ACCESS Support affinity group page.',
      'description' => 'This is a test event for Cypress testing. It validates that events only appear on affinity group pages when configured.',
      'start_date' => date('Y-m-d\TH:i:s', strtotime('tomorrow +4 hours')),
      'end_date' => date('Y-m-d\TH:i:s', strtotime('tomorrow +6 hours')),
    ],
    [
      'title' => 'Test Event - Both Locations',
      'field_choose_where_to_share_this' => [
        'on_the_announcements_page',
        'on_your_affinity_group_page',
      ],
      'location' => 'Zoom',
      'event_type' => 'Conference',
      'affiliation' => 'Community',
      'affinity_group' => $access_support_ag_id,
      'summary' => 'This event should appear on both the main page and the ACCESS Support AG page.',
      'description' => 'This is a test event for Cypress testing. It validates that events appear in multiple locations when configured.',
      'start_date' => date('Y-m-d\TH:i:s', strtotime('tomorrow +7 hours')),
      'end_date' => date('Y-m-d\TH:i:s', strtotime('tomorrow +10 hours')),
    ],
    [
      'title' => 'Test Event - No Visibility',
      'field_choose_where_to_share_this' => [],
      'location' => 'Online',
      'event_type' => 'Training',
      'affiliation' => 'Community',
      'summary' => 'This event should not appear on any listing pages.',
      'description' => 'This is a test event for Cypress testing. It validates that events with no visibility settings do not appear.',
      'start_date' => date('Y-m-d\TH:i:s', strtotime('tomorrow +11 hours')),
      'end_date' => date('Y-m-d\TH:i:s', strtotime('tomorrow +12 hours')),
    ],
  ];

  foreach ($events as $event_data) {
    // Check if event series already exists, delete if found.
    $existing = \Drupal::entityTypeManager()
      ->getStorage('eventseries')
      ->loadByProperties([
        'type' => 'default',
        'title' => $event_data['title'],
      ]);

    if ($existing) {
      foreach ($existing as $series) {
        // This will also delete associated eventinstances.
        $series->delete();
      }
    }

    // Create event series.
    $series_data = [
      'type' => 'default',
      'title' => $event_data['title'],
      'recur_type' => 'custom',
      'field_choose_where_to_share_this' => $event_data['field_choose_where_to_share_this'],
      'field_summary' => [
        'value' => $event_data['summary'],
        'format' => 'basic_html',
      ],
      'body' => [
        'value' => $event_data['description'],
        'format' => 'basic_html',
      ],
      'custom_date' => [
        'value' => $event_data['start_date'],
        'end_value' => $event_data['end_date'],
      ],
      'field_location' => $event_data['location'],
      'field_event_type' => $event_data['event_type'],
      'field_affiliation' => $event_data['affiliation'],
      'domain_access' => ['amp_cyberinfrastructure_org'],
      'moderation_state' => 'published',
      'uid' => 1,
      'status' => 1,
    ];

    // Add optional fields.
    if (!empty($ai_tag_id)) {
      $series_data['field_tags'] = [$ai_tag_id];
    }
    if (!empty($event_data['affinity_group'])) {
      $series_data['field_affinity_group_node'] = [$event_data['affinity_group']];
    }

    $series = \Drupal::entityTypeManager()
      ->getStorage('eventseries')
      ->create($series_data);
    $series->save();

    $msg = 'Created test event: ' . $event_data['title'];
    \Drupal::logger('amp_dev.install')->notice($msg);
  }
}
