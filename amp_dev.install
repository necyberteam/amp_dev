<?php

/**
 * @file
 */

use Drupal\user\Entity\User;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;

/**
 * @file
 * Initiate dev site.
 */

/**
 * Implements hook_install().
 */
function amp_dev_install() {
  \Drupal::service('module_installer')->uninstall(['captcha', 'image_captcha', 'recaptcha']);
  // Disable constant contact cron run.
  \Drupal::state()->set('access_affinitygroup.alloc_cron_disable', TRUE);

  // amp_dev_install_tagged_resource();
  // amp_dev_install_create_dummy_ci_links();
  amp_dev_install_update_user_100();
  amp_dev_install_update_dummy_users();
  amp_dev_install_update_user_101();
}

/**
 *
 */
function amp_dev_install_tagged_resource() {
  // Creating a resource that has a tag on it
  // Example IDs.
  $webform_id = 'resource';
  $webform = Webform::load($webform_id);
  // kint($webform);
  // Create webform submission.
  $values = [
    'webform_id' => $webform->id(),
    'data' => [
      'approved' => 'Approved',
      'title' => 'Cybersecurity Resource Center',
      'category' => 'learning',
      // Ai tag.
      'tags' => ['271'],
      // Beginner.
      'skill_level' => ['304'],
      'description' => 'The Cybersecurity Resource Center is one of the best around.
      They are at your service 24/7 and can help very quickly. They are great at what they do!',
      // 'link_to_resource' =>[
      // '#type' => 'link',
      // '#title' => 'https://www.opm.gov/cybersecurity/',
      // '#url' => Url::fromUri('https://www.opm.gov/cybersecurity/'),
      // 'terms' => '0',
      // ]
      // 'link_to_resource' =>[
      // Link::fromTextAndUrl('https://www.opm.gov/cybersecurity/',Url::fromUri('https://www.opm.gov/cybersecurity/')),
      // ],
    ],
  ];

  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
  $webform_submission = WebformSubmission::create($values);
  $webform_submission->save();
}

/**
 *
 */
function amp_dev_install_create_dummy_ci_links() {

  $dummy_ci_links = [
    ['title' => 'ci-link-for-user-200', 'uid' => 199],
    ['title' => 'ci-link-for-user-201', 'uid' => 201],
  ];

  foreach ($dummy_ci_links as $dummy_ci_link) {
    $webform_id = 'resource';

    $webform = Webform::load($webform_id);
    if ($webform->hasSubmissions()) {
      $query = \Drupal::entityQuery('webform_submission')
        ->accessCheck(TRUE)
        ->condition('webform_id', $webform_id);
      $result = $query->execute();
      foreach ($result as $item) {
        $submission = WebformSubmission::load($item);
        $submission_data = $submission->getData();

        if ($submission_data['title'] === $dummy_ci_link['title']) {
          $submission->delete();
        }
      }
    }

    // Create webform submission.
    $values = [
      'webform_id' => $webform->id(),
      'uid' => $dummy_ci_link['uid'],
      'uri' => '/form/resource',
      'data' => [
        'title' => $dummy_ci_link['title'],
        'category' => 'learning',
        'approved' => 1,
      ],
    ];

    /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
    $webform_submission = WebformSubmission::create($values);
    $webform_submission->save();
  }
}

/**
 * Update users 199 & 201 to be test users with testable roles, interests, etc.
 * A behat test then checks that these users have the correct values.
 */
function amp_dev_install_update_dummy_users() {
  $users = [
    [
      'id' => 199,
      'first_name' => 'Walnut',
      'last_name' => 'Pie',
      'field_institution' => 'institution-for-walnut-pie',
      'field_access_organization' => ['4300'], // '4300' is the ID for 'MGHPCC'
      'name' => 'test_walnut_pie',
      'email' => 'walnut@pie.org',
      'preferred_pronouns' => 'they/them',
      'bio' => 'I am a pie',
      'roles' => ['affinity_group_leader', 'student'],
      'field_academic_status' => 'third',
      'affinity_group' => ['DELTA'],
      'interest' => ['science gateway', 'access-acount'],
      'skill' => ['bioinformatics', 'astrophysics'],
    ],
    [
      'id' => 201,
      'first_name' => 'Pecan',
      'last_name' => 'Pie',
      'field_institution' => 'institution-for-pecan-pie',
      'field_access_organization' => ['4300'], // '4300' is the ID for 'MGHPCC'
      'name' => 'test_pecan_pie',
      'preferred_pronouns' => 'they/them',
      'bio' => 'I am a pie',
      'email' => 'pecan@pie.org',
      'roles' => ['campuschampionsadmin', 'ccmnet_pm'],
      'affinity_group' => ['DELTA', 'Rockfish'],
      'interest' => ['data-management-software', 'distributed-computing'],
    ],
    [
      'id' => 204,
      'first_name' => 'Apple',
      'last_name' => 'Pie',
      'field_institution' => 'institution-for-apple-pie',
      'field_access_organization' => ['4300'], // '4300' is the ID for 'MGHPCC'
      'name' => 'test_apple_pie',
      'preferred_pronouns' => 'they/them',
      'bio' => 'I am a pie',
      'email' => 'apple@pie.org',
      'roles' => ['administrator'],
      'affinity_group' => ['Rockfish'],
      'interest' => [],
    ],
  ];

  foreach ($users as $user_data) {

    $user = User::load($user_data['id']);

    $user->set('field_user_first_name', $user_data['first_name']);
    $user->set('field_user_last_name', $user_data['last_name']);
    $user->set('field_institution', $user_data['field_institution']);
    $user->set('field_access_organization', $user_data['field_access_organization']);
    $user->set('field_user_preferred_pronouns', $user_data['preferred_pronouns']);
    $user->set('field_user_bio', $user_data['bio']);
    // $user->set('name', $user_data['name']);
    $user->set('mail', $user_data['email']);
    $user->set('pass', $user_data['first_name']);
    $user->set('status', 1);
    $user->set('roles', $user_data['roles']);
    if (array_key_exists('field_academic_status', $user_data)) {
      $user->set('field_academic_status', $user_data['field_academic_status']);
    }
    $user->save();

    // Set flags on the following categories:
    foreach (['interest', 'skill', 'affinity_group'] as $flag_name) {
      amp_dev_install_user_set_flag($user, $user_data, $flag_name);
    }

    // $msg = __FUNCTION__ . "() - created user with email = "  . $user_data['email']
    //   . ' -- ' . basename(__FILE__) . ':' . __LINE__;
    // \Drupal::logger('amp_dev.install')->notice($msg);
    // \Drupal::messenger()->addStatus($msg);
  }
}

/**
 * Helper function to update flags when modifying a test user.
 */
function amp_dev_install_user_set_flag($user, $user_data, $flag_name) {
  $flag_service = \Drupal::service('flag');
  if (array_key_exists($flag_name, $user_data)) {
    foreach ($user_data[$flag_name] as $tax_term) {
      $taxonomy_entity = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(['name' => $tax_term]);
      $taxonomy_entity = reset($taxonomy_entity);

      if ($taxonomy_entity === FALSE) {
        $msg = __FUNCTION__ . "() -- taxonomy term '$tax_term' not found"
          . ' -- ' . basename(__FILE__) . ':' . __LINE__;
        \Drupal::logger('amp_dev.install')->error($msg);
        \Drupal::messenger()->addError($msg);
      }
      else {
        $tax_flag_service = $flag_service->getFlagById($flag_name);
        $already_flagged = $flag_service->getFlagging($tax_flag_service, $taxonomy_entity, $user);
        if (!$already_flagged) {
          $flag_service->flag($tax_flag_service, $taxonomy_entity, $user);
        }
      }
    }
  }
}

/**
 * Set all user__field_user_first_name to default.
 */
function amp_dev_install_update_user_100() {
  amp_dev_dbupdate('user__field_user_first_name', 'field_user_first_name_value', 'Lux')
  amp_dev_dbupdate('registrant__field_first_name', 'field_first_name_value', 'Lux')
  amp_dev_dbupdate('registrant_revision__field_first_name', 'field_first_name_value', 'Lux')
  amp_dev_dbupdate('user__field_user_last_name', 'field_user_last_name_value', 'Rivers')
  amp_dev_dbupdate('registrant__field_last_name', 'field_last_name_value', 'Rivers')
  amp_dev_dbupdate('registrant_revision__field_last_name', 'field_last_name_value', 'Rivers')
}

/**
 * Db mass update.
 */
function amp_dev_dbupdate($table, $field, $value) {
  $update = \Drupal::database()->update($table)
  ->fields([
    $field => $value,
  ])
  ->execute();
}

/**
 * Set Julie's name.
 */
function amp_dev_install_update_user_101() {
  $user_100 = \Drupal::entityTypeManager()->getStorage('user')->load(100);
  $user_100->set('field_user_first_name', 'Julie');
  $user_100->set('field_user_last_name', 'Ma');
  $user_100->set('field_institution', 'MGHPCC');
  $user_100->save();
}
